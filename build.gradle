import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id "java"
    id "idea"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "1.7.20"
    id "com.google.devtools.ksp" version "1.7.20-1.0.8"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id 'com.diffplug.spotless' version '6.2.0'
}

group = "org.strykeforce"
version = "22.3.0-SNAPSHOT"

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(2767)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

wpi.java.configureTestTasks(test)

repositories {
    mavenCentral()
    maven { url = "https://first.wpi.edu/FRC/roborio/maven/release" }
}

dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)

    implementation('org.slf4j:slf4j-api:2.0.3')
    implementation('io.github.microutils:kotlin-logging:3.0.4')
    implementation('com.squareup.okhttp3:okhttp:4.10.0')
    implementation('org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.0')
    implementation('com.squareup.moshi:moshi:1.14.0')
    ksp('com.squareup.moshi:moshi-kotlin-codegen:1.14.0')

    // Testing
    testImplementation platform('org.junit:junit-bom:5.9.0')
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation('org.assertj:assertj-core:3.23.1')
    testImplementation('org.mockito:mockito-junit-jupiter:4.8.0')
    testImplementation("org.mockito.kotlin:mockito-kotlin:4.0.0")
    testImplementation('org.skyscreamer:jsonassert:1.5.1')
    testRuntimeOnly('ch.qos.logback:logback-classic:1.4.4')

    api("org.jetbrains:annotations:23.0.0")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"

        // For creation of default methods in interfaces
        freeCompilerArgs += "-Xjvm-default=all"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"

        // For creation of default methods in interfaces
        freeCompilerArgs += "-Xjvm-default=all"
    }
}


java {
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

publishing {
    publications {
        thirdcoastLibrary(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "s3://maven.strykeforce.org/repo"
            credentials(AwsCredentials) {
                accessKey "${System.getenv("STRYKEFORCE_AWS_KEY")}"
                secretKey "${System.getenv("STRYKEFORCE_AWS_SECRET")}"
            }
        }
    }
}

spotless {
    java {
        target fileTree('src') {
            include '**/*.java'
            exclude '**/build/', '**/build-*/'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/', '**/build-*/'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/', '**/build-*/', '**/.direnv/'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
